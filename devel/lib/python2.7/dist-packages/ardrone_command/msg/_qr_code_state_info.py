"""autogenerated by genpy from ardrone_command/qr_code_state_info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class qr_code_state_info(genpy.Message):
  _md5sum = "bbe0944ffa0627a7e01d8309ce6114bc"
  _type = "ardrone_command/qr_code_state_info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#This message contains the info associated with seeing a QR code with the AR Drone an estimating position from it.  Multiple messages can be published from a single frame if there is more than one QR code (which can be detected by looking at the time stamps).

time time_stamp
string  qr_code_identifier
float64 qr_code_size #Dimension of one of the sides of the QR code (in meters)

float64[16] transform #4x4 transform of the drone associated with this QR code.  Column row format: x11, x21, x31, x41, x12, etc




"""
  __slots__ = ['time_stamp','qr_code_identifier','qr_code_size','transform']
  _slot_types = ['time','string','float64','float64[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,qr_code_identifier,qr_code_size,transform

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(qr_code_state_info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      if self.qr_code_identifier is None:
        self.qr_code_identifier = ''
      if self.qr_code_size is None:
        self.qr_code_size = 0.
      if self.transform is None:
        self.transform = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.time_stamp = genpy.Time()
      self.qr_code_identifier = ''
      self.qr_code_size = 0.
      self.transform = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.time_stamp.secs, _x.time_stamp.nsecs))
      _x = self.qr_code_identifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.qr_code_size))
      buff.write(_struct_16d.pack(*self.transform))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.time_stamp.secs, _x.time_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.qr_code_identifier = str[start:end].decode('utf-8')
      else:
        self.qr_code_identifier = str[start:end]
      start = end
      end += 8
      (self.qr_code_size,) = _struct_d.unpack(str[start:end])
      start = end
      end += 128
      self.transform = _struct_16d.unpack(str[start:end])
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.time_stamp.secs, _x.time_stamp.nsecs))
      _x = self.qr_code_identifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.qr_code_size))
      buff.write(self.transform.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.time_stamp.secs, _x.time_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.qr_code_identifier = str[start:end].decode('utf-8')
      else:
        self.qr_code_identifier = str[start:end]
      start = end
      end += 8
      (self.qr_code_size,) = _struct_d.unpack(str[start:end])
      start = end
      end += 128
      self.transform = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_16d = struct.Struct("<16d")
_struct_2I = struct.Struct("<2I")
_struct_d = struct.Struct("<d")
