"""autogenerated by genpy from ardrone_command/qr_go_to_point_control_info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class qr_go_to_point_control_info(genpy.Message):
  _md5sum = "3875b1a67eb136919db8696c0841fe5c"
  _type = "ardrone_command/qr_go_to_point_control_info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#This message is published when the drone is going to a particular point using QR code coordinates.

time time_stamp
float64[3] target_point_camera_xyz #The estimated position of the target point in the AR drone's camera coordinate system
float64[3] target_point_local_xyz #The estimated position of the target point in the AR drone movement system coordinate system
float64 estimated_distance_to_target

#The control algorithm has two different PID value sets that it uses.  One is optimized for maintaining position when the drone is close to the point (near) and the other is optimized for getting the drone close to the point without gaining too much speed (far).  The drone switches between these sets based on how far it thinks it is from the target.

uint32 mode #0 = near, 1 = far
float64 qr_x_axis_I_term #The I part of the PID control for the quadrotor x axis
float64 qr_y_axis_I_term #The I part of the PID control for the quadrotor y axis

float64[3] qr_xyz_throttle #The final values sent to the AR drone for desired speed in XYZ


"""
  __slots__ = ['time_stamp','target_point_camera_xyz','target_point_local_xyz','estimated_distance_to_target','mode','qr_x_axis_I_term','qr_y_axis_I_term','qr_xyz_throttle']
  _slot_types = ['time','float64[3]','float64[3]','float64','uint32','float64','float64','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,target_point_camera_xyz,target_point_local_xyz,estimated_distance_to_target,mode,qr_x_axis_I_term,qr_y_axis_I_term,qr_xyz_throttle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(qr_go_to_point_control_info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      if self.target_point_camera_xyz is None:
        self.target_point_camera_xyz = [0.,0.,0.]
      if self.target_point_local_xyz is None:
        self.target_point_local_xyz = [0.,0.,0.]
      if self.estimated_distance_to_target is None:
        self.estimated_distance_to_target = 0.
      if self.mode is None:
        self.mode = 0
      if self.qr_x_axis_I_term is None:
        self.qr_x_axis_I_term = 0.
      if self.qr_y_axis_I_term is None:
        self.qr_y_axis_I_term = 0.
      if self.qr_xyz_throttle is None:
        self.qr_xyz_throttle = [0.,0.,0.]
    else:
      self.time_stamp = genpy.Time()
      self.target_point_camera_xyz = [0.,0.,0.]
      self.target_point_local_xyz = [0.,0.,0.]
      self.estimated_distance_to_target = 0.
      self.mode = 0
      self.qr_x_axis_I_term = 0.
      self.qr_y_axis_I_term = 0.
      self.qr_xyz_throttle = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.time_stamp.secs, _x.time_stamp.nsecs))
      buff.write(_struct_3d.pack(*self.target_point_camera_xyz))
      buff.write(_struct_3d.pack(*self.target_point_local_xyz))
      _x = self
      buff.write(_struct_dI2d.pack(_x.estimated_distance_to_target, _x.mode, _x.qr_x_axis_I_term, _x.qr_y_axis_I_term))
      buff.write(_struct_3d.pack(*self.qr_xyz_throttle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.time_stamp.secs, _x.time_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 24
      self.target_point_camera_xyz = _struct_3d.unpack(str[start:end])
      start = end
      end += 24
      self.target_point_local_xyz = _struct_3d.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.estimated_distance_to_target, _x.mode, _x.qr_x_axis_I_term, _x.qr_y_axis_I_term,) = _struct_dI2d.unpack(str[start:end])
      start = end
      end += 24
      self.qr_xyz_throttle = _struct_3d.unpack(str[start:end])
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.time_stamp.secs, _x.time_stamp.nsecs))
      buff.write(self.target_point_camera_xyz.tostring())
      buff.write(self.target_point_local_xyz.tostring())
      _x = self
      buff.write(_struct_dI2d.pack(_x.estimated_distance_to_target, _x.mode, _x.qr_x_axis_I_term, _x.qr_y_axis_I_term))
      buff.write(self.qr_xyz_throttle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.time_stamp.secs, _x.time_stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 24
      self.target_point_camera_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.target_point_local_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 28
      (_x.estimated_distance_to_target, _x.mode, _x.qr_x_axis_I_term, _x.qr_y_axis_I_term,) = _struct_dI2d.unpack(str[start:end])
      start = end
      end += 24
      self.qr_xyz_throttle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_dI2d = struct.Struct("<dI2d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
