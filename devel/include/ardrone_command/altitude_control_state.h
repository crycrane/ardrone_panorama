// Generated by gencpp from file ardrone_command/altitude_control_state.msg
// DO NOT EDIT!


#ifndef ARDRONE_COMMAND_MESSAGE_ALTITUDE_CONTROL_STATE_H
#define ARDRONE_COMMAND_MESSAGE_ALTITUDE_CONTROL_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ardrone_command
{
template <class ContainerAllocator>
struct altitude_control_state_
{
  typedef altitude_control_state_<ContainerAllocator> Type;

  altitude_control_state_()
    : time_stamp()
    , target_altitude(0.0)
    , current_p_term(0.0)
    , current_i_term(0.0)  {
    }
  altitude_control_state_(const ContainerAllocator& _alloc)
    : time_stamp()
    , target_altitude(0.0)
    , current_p_term(0.0)
    , current_i_term(0.0)  {
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef double _target_altitude_type;
  _target_altitude_type target_altitude;

   typedef double _current_p_term_type;
  _current_p_term_type current_p_term;

   typedef double _current_i_term_type;
  _current_i_term_type current_i_term;




  typedef boost::shared_ptr< ::ardrone_command::altitude_control_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_command::altitude_control_state_<ContainerAllocator> const> ConstPtr;

}; // struct altitude_control_state_

typedef ::ardrone_command::altitude_control_state_<std::allocator<void> > altitude_control_state;

typedef boost::shared_ptr< ::ardrone_command::altitude_control_state > altitude_control_statePtr;
typedef boost::shared_ptr< ::ardrone_command::altitude_control_state const> altitude_control_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardrone_command::altitude_control_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardrone_command::altitude_control_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ardrone_command

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ardrone_command': ['/home/ghost/catkin_ws/src/ardrone_command/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_command::altitude_control_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_command::altitude_control_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_command::altitude_control_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a10456794d65dd23bebefb4d2ed1033";
  }

  static const char* value(const ::ardrone_command::altitude_control_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a10456794d65dd2ULL;
  static const uint64_t static_value2 = 0x3bebefb4d2ed1033ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardrone_command/altitude_control_state";
  }

  static const char* value(const ::ardrone_command::altitude_control_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#altitude control command info\n\
\n\
time time_stamp\n\
float64 target_altitude #Altitude to try to achieve in mm\n\
float64 current_p_term #(targetAltitude - fabs(altitude))\n\
float64 current_i_term  #targetAltitudeITerm = targetAltitudeITerm + pTerm\n\
\n\
";
  }

  static const char* value(const ::ardrone_command::altitude_control_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.target_altitude);
      stream.next(m.current_p_term);
      stream.next(m.current_i_term);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct altitude_control_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_command::altitude_control_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardrone_command::altitude_control_state_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "target_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.target_altitude);
    s << indent << "current_p_term: ";
    Printer<double>::stream(s, indent + "  ", v.current_p_term);
    s << indent << "current_i_term: ";
    Printer<double>::stream(s, indent + "  ", v.current_i_term);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDRONE_COMMAND_MESSAGE_ALTITUDE_CONTROL_STATE_H
