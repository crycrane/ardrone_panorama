// Generated by gencpp from file ardrone_command/qr_code_state_info.msg
// DO NOT EDIT!


#ifndef ARDRONE_COMMAND_MESSAGE_QR_CODE_STATE_INFO_H
#define ARDRONE_COMMAND_MESSAGE_QR_CODE_STATE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ardrone_command
{
template <class ContainerAllocator>
struct qr_code_state_info_
{
  typedef qr_code_state_info_<ContainerAllocator> Type;

  qr_code_state_info_()
    : time_stamp()
    , qr_code_identifier()
    , qr_code_size(0.0)
    , transform()  {
      transform.assign(0.0);
  }
  qr_code_state_info_(const ContainerAllocator& _alloc)
    : time_stamp()
    , qr_code_identifier(_alloc)
    , qr_code_size(0.0)
    , transform()  {
      transform.assign(0.0);
  }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _qr_code_identifier_type;
  _qr_code_identifier_type qr_code_identifier;

   typedef double _qr_code_size_type;
  _qr_code_size_type qr_code_size;

   typedef boost::array<double, 16>  _transform_type;
  _transform_type transform;




  typedef boost::shared_ptr< ::ardrone_command::qr_code_state_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_command::qr_code_state_info_<ContainerAllocator> const> ConstPtr;

}; // struct qr_code_state_info_

typedef ::ardrone_command::qr_code_state_info_<std::allocator<void> > qr_code_state_info;

typedef boost::shared_ptr< ::ardrone_command::qr_code_state_info > qr_code_state_infoPtr;
typedef boost::shared_ptr< ::ardrone_command::qr_code_state_info const> qr_code_state_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardrone_command::qr_code_state_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ardrone_command

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ardrone_command': ['/home/ghost/catkin_ws/src/ardrone_command/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_command::qr_code_state_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_command::qr_code_state_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_command::qr_code_state_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbe0944ffa0627a7e01d8309ce6114bc";
  }

  static const char* value(const ::ardrone_command::qr_code_state_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbe0944ffa0627a7ULL;
  static const uint64_t static_value2 = 0xe01d8309ce6114bcULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardrone_command/qr_code_state_info";
  }

  static const char* value(const ::ardrone_command::qr_code_state_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message contains the info associated with seeing a QR code with the AR Drone an estimating position from it.  Multiple messages can be published from a single frame if there is more than one QR code (which can be detected by looking at the time stamps).\n\
\n\
time time_stamp\n\
string  qr_code_identifier\n\
float64 qr_code_size #Dimension of one of the sides of the QR code (in meters)\n\
\n\
float64[16] transform #4x4 transform of the drone associated with this QR code.  Column row format: x11, x21, x31, x41, x12, etc\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::ardrone_command::qr_code_state_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.qr_code_identifier);
      stream.next(m.qr_code_size);
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct qr_code_state_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_command::qr_code_state_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardrone_command::qr_code_state_info_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "qr_code_identifier: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.qr_code_identifier);
    s << indent << "qr_code_size: ";
    Printer<double>::stream(s, indent + "  ", v.qr_code_size);
    s << indent << "transform[]" << std::endl;
    for (size_t i = 0; i < v.transform.size(); ++i)
    {
      s << indent << "  transform[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.transform[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDRONE_COMMAND_MESSAGE_QR_CODE_STATE_INFO_H
